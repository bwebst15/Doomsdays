General
1: Remove application and conf files = apt-get purge
2: ls -lart = list long all reverse time
3: change directory = cd
4: check for accounts with highest privilege = awk -F: '($3=="0"){print}' /etc/passwd
5: check for empty password = cat /etc/shadow | awk -F: '($2==""){print $1}'
6: change unknown users to sbin no login = vi /etc/passwd        /sbin/nologin or /bin/false
7: check /etc/shadow for cleartext password = vi /etc/shadow
8: sudo netstat -plantu = view all active connections
9: safely change permissions of file (use if you have trouble editing file) = chattr -i
10: hostname file = vi /etc/hosts
11: check ip addresses = ifconfig
12: check nic cards = ip addr
13: Delete/Remove user (games, news, mail, landscape) = sudo deluser *username*
14: Delete/Remove group = sudo delgroup *groupname*
15: Make sure home directories have permissions 700 = chmod 700 /home/*
16: check installed programs = dpkg --get-selections | grep -v deinstall | less
17: check access.conf = vi /etc/security/access.conf
18: check pam = ls -la /etc/pam.d    ls -a /lib/*/security    only session should default=1 others should be default=ignore
19: change to tty2 = Ctrl+Alt+F2
20: run last command as sudo = sudo!!
21: install apps = apt-get install
22: remove apps and all config files = apt-get purge

Aliases
1: vi ~/.bashrc
2: vi ~/.bash_aliases
3: vi ~/.bash_profile
4: vi ~/.bash_login
5: vi ~/.profile
6: vi /etc/bash.bashrc
7: vi /etc/profile
8: vi /etc/skel/.bashrc
9: vi /etc/skel/.profile
10: alias
11: unalias -a name *name*

Cron
1: view scheduled cronjob = crontab -l
2: view scheduled cronjob of different user = sudo crontab -u *user* -l
3: edit scheduled crons = crontab -e
4: delete cronjob = crontab -r
5: Cron files = vi /etc/crontab    
cd /etc/cron.d
cd /etc/cron.hourly
cd /etc/cron.daily
apport
apt
aptitude
bsdmainutils
dpkg
logrotate
man-db
mlocate
passwd
sopularity-contest
skhunter
standard
update-notifier-common
cd /etc/cron.weekly
apt-xapian-index
man-db
rkhunter
cd /etc/cron.monthly
cd /var/spool/cron/crontabs
6: Stop cron = service cron stop
7: stop users from using cron = touch /etc/cron.deny
awk -F: ‘{print $1}’ /etc/passwd | grep -v root > /etc/cron.deny
chmod 600 /etc/cron.deny
8: stop users from using at
awk -F: ‘{print $1}’ /etc/passwd | grep -v root > /etc/cron.at
chmod 600 /etc/cron.at
9: allow users to use from = vi /etc/cron.allow
*username*
chmod 600 /etc/cron.allow

Repos
1: repositories = vi /etc/apt/sources.list 
Deb http://archive.ubuntu.com/ubuntu/ precise main restricted
Deb-src https://archive.ubuntu.com/ubuntu precise main restricted
Deb http://archive.ubuntu.com/ubuntu/ precise-updates main restricted
Deb-src https://archive.ubuntu.com/ubuntu precise-updates main restricted
Deb http://archive.ubuntu.com/ubuntu/ precise main universe
Deb-src https://archive.ubuntu.com/ubuntu precise main universe
Deb http://archive.ubuntu.com/ubuntu/ precise main-updates universe
Deb-src https://archive.ubuntu.com/ubuntu precise-updates main universe
Deb http://archive.ubuntu.com/ubuntu/ precise multiverse
Deb-src https://archive.ubuntu.com/ubuntu precise multiverse
Deb http://archive.ubuntu.com/ubuntu/ precise-updates multiverse
Deb-src https://archive.ubuntu.com/ubuntu precise-updates multiverse
Deb http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
Deb-src https://archive.ubuntu.com/ubuntu precise-backports main restricted universe multiverse
Deb http://archive.ubuntu.com/ubuntu/ precise-security main restricted
Deb-src https://archive.ubuntu.com/ubuntu precise-security main restricted
Deb http://archive.ubuntu.com/ubuntu/ precise-security universe
Deb-src https://archive.ubuntu.com/ubuntu precise-security universe
Deb http://archive.ubuntu.com/ubuntu/ precise-security multiverse
Deb-src https://archive.ubuntu.com/ubuntu precise-security multiverse
2: list all repositories = egrep -v '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/*
3: Clear all local repositories = sudo rm -rf /etc/apt/sources.list.d/*    sudo apt-get clean

Services
1: view all running processes = sudo initctl list | grep running
2: view all running services = service --status-all | less
3: view all running services = ps aux | less
4: view all running services in realtime = top
5: View all running services = sudo initctl list | grep running
6: Check status of service = sudo service [servicename] status
7: keyloggers = lkl, uberkey, THC-vlogger, PyKeylogger, logkeys

Sudo
1: Allow user to sudo = vi /etc/sudoers    or ls -la /etc/sudoers.d
**check to make sure group is correct**
# User privilege specification
*username*    ALL=(ALL:ALL) ALL
2:allow group to sudo = vi /etc/sudoers
%*groupname* ALL=(ALL:ALL) ALL
3: disable root login = sudo passwd -l root
4: enable root login = sudo passwd -u root
5: sudo -s = root shell        type exit or hit CTRL+D to leave

Locked out of machine
1: Hit e during grub then add rw init=/bin/bash to end of line that starts with linux
2: hit Ctrl-x to boot

Log files
1: /var/log
2: system log = /var/log/syslog
3: ssh login attempts and authentication log = /var/log/auth.log
4: Start log service = sudo start rsyslog
5: cron log = /var/log/cron.log
6: kernel log = /var/log/kern.log
7: system boot log = /var/log/boot.log
8: login records = /var/log/wtmp
9: Check for override file = /etc/init/rsyslog.override

Dhcp ip
1: vi /etc/network/interfaces
auto eth0
iface eth0 inet dhcp
2: restart networking service = sudo /etc/init.d/networking restart

Static Ip
1: vi /etc/network/interfaces
auto eth0
iface eth0 inet static
    address x.x.x.x
    netmask x.x.x.x
    network x.x.x.x
broadcast x.x.x.x
    gateway x.x.x.x
dns-nameservers 172.240.241.25 8.8.8.8

2: restart networking service = sudo /etc/init.d/networking restart
3: Fix unknown hosts problem after restart = ip route del default

Bind DNS
**note** bind9 uses port 953 for its remote name daemon control tool
1: /etc/bind
2: dns query = dig primary.domain.local
3:dns query specific address = dig domain.local @x.x.x.x
4: detailed version of dig = host -d
5: lists zones = host -l  domain.local
6: reverse dns query = dig -x 192.168.1
7: barebones version of dig = nslookup domain.local x.x.x.x
8: restart bind9 = sudo /etc/init.d/bind9 restart
9: check named.conf files for errors = sudo named-checkconf /etc/bind/db.domain.local
10: check db files for errors = named-checkzone domain.local /etc/bind/db.domain.local
11: flush bind9 dns cache = sudo rndc flush
12: forward example = db.local
13: reverse example = db.127
14: Test forward zone = dig domain.local
15: Test reverse zone = dig -x 172.20.240
16: tail -n 15 -f /var/log/syslog = check for bind9 errors
17: sudo vi /etc/resolvconf/resolv.conf.d/head = file to edit to get stuff into resolv.conf
nameserver x.x.x.x
18: sudo resolvconf -u = how to get stuff from head into resolv.conf
19: sudo apt-get update && sudo apt-get -y install bind9 bind9utils

Bind9 Setup
#note replace masterdns with hostname
#note allow recursion affects nslookup but not dig
1: sudo vi /etc/bind/db.fowardzone
$TTL 604800
@   IN  SOA     masterdns.free.dom.     root.free.dom. (
        101010      ;Serial
        36000        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          masterdns.free.dom.
@       IN  NS          secondarydns.free.dom.
@       IN NS            10    mail.example.com.
Mail IN A    Mail address
masterdns     IN  A           172.20.241.27
secondarydns     IN    A    172.20.240.25
2: sudo vi /etc/bind/db.reversezone
$TTL 604800
@    IN    SOA  masterdns.free.dom.     root. Free.dom. (
101010    ;Serial    
3600     ;Refresh
1800     ;Retry
604800     ;Expire
86400        ;Minimum TTL
)
@    IN    NS    masterdns.free.dom.
@    IN    NS    secondarydns.free.dom.
@    IN     MX    10     mail.example.com.
Mail    IN    A    mail address
Masterdns    IN    A    172.20.241.27
Secondarydns    IN    A    172.20.240.25
241.27     IN    PTR    masterdns.free.dom.
240.25    IN    PTR     secondarydns.free.dom.
3: sudo vi /etc/bind/named.conf.local
};  addonly if no work
zone “free.dom” {
    type master;
file “/etc/bind/forward.free”;
    Allow-transfer {172.20.241.27; };
    Also-notify {172.20.241.27; };
};
zone “240.20.172.in-addr.arpa” {
    type master;
    file “/etc/bind/reverse.free”;
    allow-transfer {172.20.241.27; };
    also-notify {172.20.241.27; };
};
logging {
    channel query.log {
        file "/var/lib/bind/query.log";
        // Set the severity to dynamic to see all the debug messages.
        severity debug 3;
    };
    category queries { query.log; };
};
4: vi /etc/bind/named.conf.options
acl “hostname” {
        172.168.1.101;
    127.0.0.1;
        localhost;
        localnets;
};

options {
        directory "/var/cache/bind";

        recursion yes;
    version “Not Available”;
        allow-query { hostname; };
    allow-query-cache { any; };
    allow-recursion { 127.0.0.1; 172.168.1.101; };
    allow-transfer { hostname; };

        forwarders {
                172.168.1.101;
8.8.8.8;
                8.8.4.4;
        };
        forward only;
    dnssec-enable yes;
       watch out for this - it may shut everything down # dnssec-validation auto;

        auth-nxdomain no;    # conform to RFC1035
        listen-on-v6 { any; };
};
5: sudo chown bind:bind /etc/bind/
6: sudo chmod 750 /etc/bind
7: sudo chmod 640 /etc/bind/*

Firewall
**note** adding rules to ufw automatically adds them to iptables
**note** apt-get uses ports 53, 80, and 443
**note** can only add ping via iptables
1: sudo ufw status verbose
2: sudo ufw enable
3: sudo ufw allow 53
4: sudo ufw allow out 53
5: sudo ufw allow bind9
6: sudo ufw allow out bind9
7: sudo ufw allow from 192.168.1.2 to port 53
8: sudo ufw default allow incoming
9: sudo ufw default deny outgoing
10: sudo ufw logging full
11: Deny multiple ports (ports 111, 1900, 3389, and 5000 on udp) = sudo ufw deny 111,1900,3389, 5000/udp
12: Deny a range of ports (ports 1000-65535 on tcp) = sudo ufw deny 1000:65535/tcp
13: Remove a single rule = sudo ufw delete *allow/deny* *port*
14: Remove all existing rules = sudo ufw reset
DPT=80 means connection on port 80

IPtables
**note** adding rules to ufw automatically adds them to iptables
1: remove all iptable rules = iptables -f
2: view iptable rules = sudo iptables -L | less
3: Allow port 53 in = sudo iptables -A INPUT -p tcp --dports 53 -j ACCEPT
4: Allow port 53 out = sudo iptables -A OUTPUT -p tcp --dports 53 -j ACCEPT
5: Allow ports 53,80,443 in = iptables -A INPUT -p tcp  --match multiport --dports 53,80,443 -j ACCEPT
6: Allow all ping requests in = sudo iptables -A INPUT -p icmp -j ACCEPT
7: Allow ping request out = sudo iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT
8: Allow ping reply in = sudo iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT
9: deny all in = sudo iptables -P INPUT DROP
10: deny all forward = sudo iptables -P FORWARD DROP
11: deny all output = sudo iptables -P OUTPUT DROP
12: Deny ip = sudo iptables -A INPUT -s x.x.x.x -j DROP
13: Save = iptables-save
14: Delete rule = sudo iptables -D INPUT -p tcp --dports 53 -j ACCEPT
15: make iptables automatically load on startup = apt-get install iptables-persistent

Only allow one terminal at a time
1: sudo vi /etc/securetty
tty1
#tty2
#tty3
#etc …
#tty63
Also comment out all other ttys except lxc
2: sudo chmod 0600 /etc/securetty

Shadow user with sudo powers
1: sudo useradd -d /home/username -s /bin/bash -m username
2: sudo usermod -aG sudo username
3: sudo passwd username

Stop IP spoofing
1: sudo vi /etc/host.conf
order bind,hosts
nospoof on

2: sudo service procps restart

3: sudo vi /etc/sysctl.conf
**#prevent some spoofing attacks**
# IP Spoofing protection
​net.ipv4.conf.all.rp_filter = 1
​net.ipv4.conf.default.rp_filter = 1

4: sudo service procps start

Restrict log access
1: sudo vi /etc/sysctl.conf
kernel.dmesg_restrict = 1

2: sudo service procps start

Stop ICMP redirects
**do not accept ICMP redirects (prevent MITM attacks)**
1: sudo vi /etc/sysctl.conf
# Ignore ICMP redirects
​net.ipv4.conf.all.accept_redirects = 0
​net.ipv4.conf.default.accept_redirects = 0

2: sudo service procps restart

Stop send redirects
1: sudo vi /etc/sysctl.conf
**#do not send ICMP redirects (we are not a router)**
# Ignore send redirects
​net.ipv4.conf.all.send_redirects = 0
​net.ipv4.conf.default.send_redirects = 0

2: sudo service procps restart

Stop Source packet routing
**#do no accept IP source route packets (we are not a router)**
1: sudo vi /etc/sysctl.conf
# Disable source packet routing
​net.ipv4.conf.all.accept_source_route = 0
​net.ipv4.conf.default.accept_source_route = 0

2: sudo service procps start

Disable IPv6
1: sudo vi /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1

2: sudo service procps restart

AppArmor
1: Install apparmor-utils = sudo apt-get -y install apparmor-utils
2: Check apparmor status = sudo apparmor_status or sudo aa-status
3: Check what processes are associated with profiles = sudo aa-unconfined
4: Start app armor = sudo service apparmor start
5: Set a single profile to enforce mode = sudo aa-enforce /path/name
6: Set a single profile to complain mode = sudo aa-complain /path/name
7: Set all profiles to enforce mode = sudo aa-enforce /etc/apparmor.d/*
8: Reload all profiles = sudo service apparmor reload
9: Create new profile = sudo aa-genprof Processname
10: Edit profile rules = sudo cat /etc/apparmor.d/path.path.processname
11: Disable profile = sudo ln -s /etc/apparmor.d/profile.name /etc/apparmor.d/disable && sudo apparmor+parser -R /etc/apparmor.d/profile.name
12: Enable profile = rm /etc/apparmor.d/disable/profile.name && cat /etc/apparmor.d/profile.name | sudo apparmor_parser -a
13: Scan log profiles and updates misbehaving programs = sudo aa-logprof
14: App armor configuration = vi /etc/apparmor.d/usr.sbin.named
# vim:sytax=appamor
#include <tunables/global

/usr/sbin/named {
    #include <abstractions/base>
    #include <abstractions/nameservice>

    capability net_bind_service,
    capability setgid,
    capability setuid,
    capability sys_chroot,
    capability sys_resource,

    # /etc/bind should be read-only for bind
    # /var/lib/bind is for dynamically updated zone (and journal) files.
    # /var/cache/bind is for slave/stub data, since we’re not the origin of it.
    # See /usr/share/doc/bind9/README.Debian.gz
    /etc/bind** r,
    /var/lib/bind/** rw,
    /var/lib/bind/ rw,
    /var/cache/bind/** rw,
    /var/cache/bind/ rw,

    #gssapi
    /etc/krb5.keytab kr,
    /etc/bind/krb5.keytab kr,

    #ssl
    /etc/ssl/openssl.cnf r,
    
    # dnscvsutil package
    /var/lib/dnscvutil/compiled/** rw,

    /proc/net/if_inet6 r,
    /proc/*/net/if_inet6 r,
    /usr/sib/named mr,
    /{,var/}run/named/named.pid w,
    /{,var/}run/named/session.key w,
    # support for resolvconf
    /{,var/}run/named/named.options r,

    # some people like to put logs in /var/log/named/ instead of having
    # syslog do the heavy lifting.
    /var/log/named/** rw,
    /var/log/named/ rw,

    # Site-specific additions and overrides. See local/README for details.
    #include <local/usr.sbin.named>
15: Reload profile = sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.named

rkhunter
1: sudo apt-get -y install rkhunter
2: sudo rkhunter --update
3: sudo rkhunter --propupd
4: Run rkhunter scan = sudo rkhunter -c --propupd  --sk --rwo
5: /var/log/rkhunter.log

Harden SSL
1: check openssl version needs to be updated if version 1.01f or older or if build date is before Apr 7 20:33:29 UTC 2014 = sudo openssl version
2: sudo apt-get upgrade -y openssl libssl-dev
3: sudo apt-cache policy openssl libssl-dev

Check for shellshock bash vulnerability
1: sudo env i='() { :;}; echo Your system is Bash vulnerable' bash -c "echo Bash vulnerability test"
2: sudo apt-get install -y --only-upgrade bash

Newly created files have permissions 740
** 0 : read, write and execute
1 = read and write
2 = read and execute
3 = read only
4 = write and execute
5 = write only
6 = execute only
7 = no permissions**
1: sudo vi /etc/init.d/rc
umask 037
2: sudo vi /etc/profile
umask 037




FAILLOG_ENAB        yes
LOG_OK_LOGINS        yes
SYSLOG_SU_ENAB        yes
SYSLOG_SG_ENAB        yes
unmask 037
LOGIN_RETRIES         3
LOGIN_TIMEOUT        60
ENCRYPT_METHOD SHA512

Secure shared memory
1: sudo vi /etc/fstab
tmpfs /run/shm tmpfs ro,noexec,nosuid 0 0
2: sudo mount -a

Harden /tmp
1: vi /etc/fstab
tmpfs /tmp tmpfs mode=1777,nosuid,nodev,noexec 0 0
2: sudo mount -a
3: mv /var/tmp /tmp
4: sudo ln -s /tmp /var/tmp

SSH
sudo apt-get -y install openssh-server
login attempts = /var/log/auth.log

Harden ssh
1: vi /etc/ssh/sshd_config
Port 26
Protocol 2
UsePrivilegeSeparation yes
LogLevel VERBOSE
LoginGraceTime 30
PermitRootLogin no
StrictMode yes
AllowTcpForwarding no
IgnoreRhosts yes
PermitEmptyPasswords no
X11Forwarding no
MaxAuthTries 3
MaxStartups 2:30:10
AllowUsers username@ipaddress
2: sudo service ssh restart
3: Check for active sessions = ss -n -o state established '( dport = :22 or sport = :22 )'
4: sudo ufw limit ssh
5: sudo service ssh restart
6: ssh user@192.168.1.1 -p 26

Ssh Banner
1: vi /etc/ssh/sshd_config
Banner *path to banner*
2: vi *path to banner*
Unauthorized access is prohibited. If you are not authorized disconnect immediately. 
3: sudo service ssh restart

Ssh keys
ssh-keygen -t rsa -b 4096

~/.ssh/*keyname*
vi /etc/ssh/sshd_config
PasswordAuthentication no
PubkeyAuthentication yes
AuthorizedKeysFile %h/.ssh/authorized_keys 
Sudo service ssh restart

FTP
1: sudo apt-get -y install vsftpd
2: sudo vi /etc/vsftpd/vsftpd.conf
anonymous_enable=NO             # disable  anonymous login
local_enable=YES        # permit local logins
write_enable=YES        # enable FTP commands which change the filesystem
local_umask=037                # value of umask for file creation for local users
dirmessage_enable=YES            # enable showing of messages when users first enter a new directory
xferlog_enable=YES        # a log file will be maintained detailing uploads and downloads
connect_from_port_20=YES        # use port 20 (ftp-data) on the server machine for PORT style connections
xferlog_std_format=YES          # keep standard log file format
listen=NO               # prevent vsftpd from running in standalone mode
listen_ipv6=NO                # vsftpd will listen on an IPv6 socket instead of an IPv4 one
pam_service_name=vsftpd         # name of the PAM service vsftpd will use
tcp_wrappers=YES          # turn on tcp wrappers
userlist_enable=YES                   # vsftpd will load a list of usernames, from the filename given by userlist_file
userlist_file=/etc/vsftpd/vsftpd.userlist    # stores usernames.
userlist_deny=NO
chroot_local_user=YES
allow_writeable_chroot=YES
3: add users to allowed list = vi /etc/vsftpd/vsftpd.userlist
4: start service = service vsftpd start
port 990

Limit su to specific group
1: sudo groupadd *group*
2: sudo usermod -a -G *group* *username*
3: sudo dpkg-statoverride --update --add root *group* 4750 /bin/su

Harden 
1: Sudo chmod 640 /dev/fuse
2: Sudo chmod 640 /dev/kmsg
3: Sudo chmod 640 /dev/rfkill
4: Sudo chmod 600 /boot/grub/grub.cfg

Errors
1: Fix unknown user/group in statoverride = sudo vi /var/lib/dpkg/statoverride
2: fix *username* is not allowed to run sudo on *host* = sudo usermod -aG sudo,adm *username*
3: fix vi adds characters when hitting arrow keys in insert mode = sudo vi ~/.exrc
set nocompatible
set backspace=2
4: fix failed to fetch = rm -f /var/lib/apt/lists/lock
5: Fix hash sum mismatch try1st = sudo sed -i 's/[a-z][a-z].archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list 
rm -rf /var/lib/apt/lists/partial/*
6: Fix hash sum mismatch try2nd = apt-get clean
rm -rf /var/lib/apt/lists/*
apt-get clean
apt-get update
6: Fix dpkg returned an error code (1) = rm /var/lib/dpkg/info/$nomdupaquet* -f
8: passwd: Authentication token manipulation = chattr -i /etc/shadow    if no work then
mount -rw -o remount /
9: initializing dst: openssl failure = cp /usr/lib/x86_64-linux-gnu/openssl-1.0.0/engines/libgost.so chroot/named/usr/lib/x86_64-linux-gnu/openssl-1.0.0/engines/libgost.so
10: Add-apt-repository is not installed = sudo apt-get install software-properties-common python-software-properties
11: name.swp is in use = delete .swp file    don’t ctrl+c out of file to prevent this
12: reverse db file unexpected eol = add root.domain.local. To IN SOA
13: forward db file root.domain.local: not a valid number = remove root.domin.local from IN SOA

Lynis
sudo apt-get -y install lynis
sudo lynis --auditor system
/var/log/lynis.log

Ldap (join domain)
**allow port 389**
Sudo apt-get likewise-open
domainjoin-cli join *domain* *user*

Docker
**if bind is in docker use docker ip for dns**
1:Install docker ubuntu 16+ = apt-get update
apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository “deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable”
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io
apt-cache madison docker-ce
apt-get install docker-ce=*version_string* docker-ce-cli=*version_string* containerd.io
1:Install docker ubuntu 12.04 = apt-get update
sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
sudo reboot
sudo apt-get -y install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sh -c "echo deb https://apt.dockerproject.org/repo ubuntu-precise main > /etc/apt/sources.list.d/docker.list"
apt-get update
apt-get install docker-engine
sudo curl -L "https://github.com/docker/compose/releases/download/1.2.4.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
2: test if docker is working = sudo docker run hello-world
3: check for docker ip (look for docker0) = ifconfig
4: check docker images = docker ps -a
5: open docker = docker run -it *hostname* bash
6: start docker container = docker start *containerID*
7: open specific docker image = docker exec -i -t *containerID* bash
8: remove docker container = docker container rm *containerID*
9: make sure docker starts up automatically = sudo systemctl enable docker
10: get bind9 image for docker = docker pull sameersbn/bind:latest
11: use bind9 image to create container = docker run -d --name=bind --dns=127.0.0.1 --publish=53:53/udp --volume=/srv/docker/bind:/data --restart always
--env='ROOT_PASSWORD=YourPassword' sameersbn/bind:latest
12: install tools in docker= apt-get update
apt-get install rsyslog
apt-get install vim
apt-get install less
apt-get install iputils-ping
apt-get install man
13: if bind9 won’t start = service bind9 reload
sudo docker network create --internal --subnet=192.168.1.0/24 tunnel
docker network rm NETWORK [NETWORK...]
docker network ls
docker network connect [OPTIONS] NETWORK CONTAINER
docker network disconnect [OPTIONS] NETWORK CONTAINER

14: /etc/docker/daemon.json
{
  "live-restore": true
}
15: sudo apt-get install cryptsetup
cryptsetup -c aes-xts-plain64 --key-size 512 --hash sha512 --time 5000 --use-urandom
/srv/docker
cryptsetup open /srv/docker encrypted
mkfs.ext4 /srv/mapper/encrypted
cryptsetup --type luks open /srv/docker encrypted
mount -t ext4 /srv/mapper/encrypted /place/to/mount

OpenVAS
sudo apt-get install openvas-scanner openvas-manager openvas-administrator greenbone-security-assistant openvas-cli openvas-check-setup gsd xsltproc sqlite3
https://samiux.blogspot.com/2013/05/howto-openvas-on-ubuntu-desktop-1204-lts.html
https://www.dinotools.de/2013/02/05/install-openvas-on-ubuntu-12-04/

Untested hardening
vi /etc/default/apport
enabled=0
sudo systemctl stop apport.service
sudo systemctl disable apport.service
sudo systemctl mask apport.service
sudo systemctl stop whoopsie.service
sudo systemctl disable whoopsie.service
sudo systemctl mask whoopsie.service
sudo apt-get remove -y popularity-contest
sudo touch /etc/NetworkManager/conf.d/20-connectivity-ubuntu.conf
sudo vi /etc/security/limits.conf
user1 hard nproc 100
@group1 hard nproc 20
vi /etc/pam.d/common-auth
auth required /lib/security/pam_deny.so
auth required /lib/security/pam_warn.so
account required /lib/security/pam_deny.so
account required /lib/security/pam_warn.so
password required /lib/security/pam_deny.so
password required /lib/security/pam_warn.so
session required /lib/security/pam_deny.so
session required /lib/security/pam_warn.so

GUI
sudo apt-get install slim
sudo service slim start

Encrypt file
openssl aes-128-cbc filetoencrypt filetoencrypt.aes-128-cb
